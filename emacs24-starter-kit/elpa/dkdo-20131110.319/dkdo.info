This is /tmp/dkdo15360hVX/dkdo-20131110.319/dkdo.info, produced by
makeinfo version 4.13 from /home/melpa/melpa/working/dkdo/dkdo.texi.

This manual is for emacs package dkdo version 1.01.

   Copyright (C) 2010â€“2013 David Keegan.

   May be redistributed under the terms of the Free Software Foundation
GNU Free Documentation Licence.

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* Do List Mode: (dkdo).           Do List Editing Mode
END-INFO-DIR-ENTRY


File: dkdo.info,  Node: Top,  Next: Introduction,  Up: (dir)

Do List Mode
************

* Menu:

* Introduction::
* Data::
* Operations::
* Index::


File: dkdo.info,  Node: Introduction,  Next: Data,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Overview::
* Getting Started::
* Known Issues::
* Changes::


File: dkdo.info,  Node: Overview,  Next: Getting Started,  Up: Introduction

1.1 Overview
============

Do List Mode is a major mode supporting a freely editable task list. It
is based on org-mode, and org-mode features like outlining, visibility
cycling, and lists/checkboxes are used for structuring and managing
tasks. However in so far as it maintains the Do List in a separate
document and allows for continuous re-ordering of tasks to reflect
changing priorities, it provides an alternative to org mode's TODO
items feature.

   It keeps urgent tasks near the top of the file to maximise
visibility and supports deferred and recurring tasks.


File: dkdo.info,  Node: Getting Started,  Next: Known Issues,  Prev: Overview,  Up: Introduction

1.2 Getting Started
===================

To enable dkdo-mode for files with suffix `.do', add this line to your
emacs profile:

     (add-to-list 'auto-mode-alist '("\\.do$" . dkdo-mode))

   Dkdo-mode mode binds a number of `C-c C-x <key>' sequences. To bind
the corresponding (shorter) `C-c <key>' sequences (in dkdo-mode only),
add the following line to your emacs profile (optional but recommended):

     (add-hook 'dkdo-mode-hook 'dkdo-SetCcKeys)

   To load some sample data, open an empty file in dkdo-mode, respond
`no' to the `insert sections' prompt, and respond `yes' to the `load
sample' prompt.

   Dkdo-mode can be customised via customisation group `dk', subgroup
`dkdo'.


File: dkdo.info,  Node: Known Issues,  Next: Changes,  Prev: Getting Started,  Up: Introduction

1.3 Known Issues
================

All timestamps in the do list must be in ISO format (YYYY-MM-DD). Other
formats are not supported.


File: dkdo.info,  Node: Changes,  Prev: Known Issues,  Up: Introduction

1.4 Changes
===========

Package dkdo was written between 2010-07-23 and 2010-11-24 to replace
manual editing of a similarly structured do list file.

Version 1.1 20131104:
     Initial release as package.


File: dkdo.info,  Node: Data,  Next: Operations,  Prev: Introduction,  Up: Top

2 Data
******

* Menu:

* File Structure::
* Sections and Tasks::
* Subtasks::
* Checkboxes::
* Task/Subtask Details::
* Time Interval::


File: dkdo.info,  Node: File Structure,  Next: Sections and Tasks,  Up: Data

2.1 File Structure
==================

A Do List is a single file using org-mode headlines for structure. It
has three sections, `NOW', `LATER', and `DONE', in that order and each
consisting of a top-level org-mode headline and its content. The
content comprises of a number of tasks. A "section" begins at the
beginning of a top level headline prefix, and finishes just before the
next top level headline prefix in the file, or at the end of file.

   A "task" consists of a structured org-mode second level headline and
its content. It begins at the beginning of the second level headline
prefix, and ends just before the beginning of the next second or top
level headline prefix in the file, or at the end of file. The headline
is the first line of the task, and subsequent lines, if any, are the
"content". See also *note Task/Subtask Details::.

   A subtask is similar to a task (see above) except that it begins
with a third level org-mode headline.  *Note Task/Subtask Details::.

   For example, here is a do list with tasks in all sections:

* NOW:
** This is a Task.
This one is really urgent.

** This is a second Task:
- Needs to be done quickly.

* LATER:
** 2013-09-29 This task is due 29 September.
** 2013-10-04 This task is due 4 October.

* DONE:
** 2013-09-28 08:17 This task was completed 28 September at 08:17.


File: dkdo.info,  Node: Sections and Tasks,  Next: Subtasks,  Prev: File Structure,  Up: Data

2.2 Sections and Tasks
======================

Urgent tasks and tasks currently being worked on belong in section
`NOW'. It is usually convenient to keep the most urgent tasks closer to
the beginning of the section.  Ordering is left to the user and section
`NOW' is not sorted automatically, but when tasks are inserted
automatically they are positioned chronologically by due date with
respect to existing dated tasks starting from the beginning of the
section.

   Section `LATER' contains tasks which have a due date, and is sorted
in chronological order by due date (ie with the most urgent tasks near
the top). Calendar appointments and tasks which need to be performed or
reviewed by a particular date remain in this section until they become
actionable, and are usually then moved to section `NOW' to be worked on
(this move can be automatic).

   Section `LATER' is also a useful home for tasks which are on hold
pending action by others, and tasks which have been deferred for later
consideration.

   To allow for preparation, a task becomes "actionable" a certain
amount of time before its due date. This preparation time is
customisable via variable `dkdo-ActionableNoticeHours', and can be
adjusted to consist of working hours only via customisable variables
`dkdo-ActionableSkipAfterMidnight' and
`dkdo-ActionableSkipBeforeMidnight'.

   Once completed, tasks are moved to section `DONE', where all tasks
are prefixed with a timestamp representing the completion date. This
section is useful as a historical record, and is sorted in
chronological order by completion date.


File: dkdo.info,  Node: Subtasks,  Next: Checkboxes,  Prev: Sections and Tasks,  Up: Data

2.3 Subtasks
============

The intent of a subtask is to allow related items to be collected and
managed together and perhaps hidden from view util they are being
worked on.

   When a task with subtasks is moved, its subtasks, if any, are also
moved. However when a subtask is moved individually it is detached from
its parent and is promoted to a task.  Thus the relationship between a
subtask and its parent is not permanent.

   To ensure every subtask is completed individually, it is illegal to
move a task containing subtasks to section `DONE'. Instead each of its
subtasks must be moved to section `DONE' individually. A consequence of
this is that subtasks should not exist in section `DONE'.  *Note
Task/Subtask Details::.

   For example, here is a task with subtasks:

* NOW:
** This is a Task with two subtasks:
Arbitrary content of main task.
*** Subtask1.
Content of Subtask1.
More content of Subtask1.
*** Subtask2
- Content as a list item.
- Another list item.


File: dkdo.info,  Node: Checkboxes,  Next: Task/Subtask Details,  Prev: Subtasks,  Up: Data

2.4 Checkboxes
==============

Often task or subtask consists of a number of components or steps, all
of which must be completed before the task itself can be considered
completed. This situation is best handled by means of an org-mode
checkboxed list item in the task content for each component. Checkboxed
items are tightly integrated into the owning task/subtask. The headline
line can indicate the number or percentage of components currently
completed thanks to org-mode. *note Org Mode Checkboxes:
(org)Checkboxes.

   A checkboxed task or subtask may be automatically moved to DONE once
all components have been checked (customisable via
`dkdo-AutoFinishCheckedTasks').

* NOW:

** This is a Task with a checkboxed list [0/2]:
- [ ] Item1.
      Content of Subtask1.
- [ ] Item with subitems [0/3]:
  - [ ] Subitem1.
  - [ ] Subitem2.
  - [ ] Subitem3.


File: dkdo.info,  Node: Task/Subtask Details,  Next: Time Interval,  Prev: Checkboxes,  Up: Data

2.5 Task/Subtask Details
========================

A task is a structured second level org-mode headline, followed by
optional free-form content on succeeding lines.  A subtask differs from
a task only in that it has a third level headline prefix.

   The headline has a number of components. They are separated by
whitespace, and the headline is terminated by a newline.

   The task/subtask components are detailed below:

<Prefix> [Completed] [Due [Repetition]] [Key:] HeadlineText.
[Content]

   Where:

`Prefix'
     An org-mode headline prefix, either `**' for a task or `***' for a
     subtask.

`Completed'
     An ISO format (`YYYY-MM-DD HH:MM') completion timestamp. This is
     prepended on entry to section `DONE' and removed on exit from
     section `DONE', so it does not appear in other sections. The
     precision of the timestamp is customisable via variable
     `dkdo-DoneTimestampLength'.

`Due'
     An ISO format (`YYYY-MM-DD[HH:MM:SS]') due date indicating when
     the task is due to be completed. The date is prepended or updated
     when a task is moved to section `LATER', and is retained when a
     task is moved to other sections. If any of `HH:MM:SS' are omitted,
     zeroes are assumed.

`Repetition'
     An optional repetition interval, acted on only in the event of a
     move from section `LATER'. See *note Time Interval:: and *note
     Recurring Tasks::.

`Key'
     An optional key with a trailing colon. Useful for identifying
     related tasks. Not acted on by `dkdo-mode'.

`HeadlineText'
     Arbitrary text constituting the remainder of the headline.  Ends
     with a newline.

`Content'
     Optional task/subtask content. One or more lines of pretty much
     arbitrary text. May contain org-mode headlines of level three or
     lower, lists, checkboxes, etc. The task ends at the next second or
     first level org-mode headline.



File: dkdo.info,  Node: Time Interval,  Prev: Task/Subtask Details,  Up: Data

2.6 Time Interval
=================

A time interval is specified in the following format:

<Digits><Unit>

   Where:

`Digits'
     An unsigned decimal integer. The unit must follow immediately
     without intervening space.

`Unit'
     A single character from the following y (year), m (month) w
     (week), d (day), h (hour).

   It is used as a repetition interval on a recurring task. It can also
be used as a relative time input for a date in which case it may be
preceded by a sign (+ or -).


File: dkdo.info,  Node: Operations,  Next: Index,  Prev: Data,  Up: Top

3 Operations
************

* Menu:

* Operations Overview::
* Start New File::
* Start New Task::
* Move to DONE::
* Move to LATER::
* Move to NOW::
* Recurring Tasks::
* Entering Times::
* Refresh Buffer::
* Refresh Timer::


File: dkdo.info,  Node: Operations Overview,  Next: Start New File,  Up: Operations

3.1 Overview
============

Normal (org-mode) editing commands are not restricted in any way, and
indeed are necessary for initial entry of tasks into the dolist. You
are free to make any changes you wish to the file content at any time,
including changes that break its structure as a do list. It is
necessary to take reasonable care to avoid such changes as unexpected
outcomes are likely.

   Do List mode provides a number of commands which automate operations
on tasks and/or subtasks. These commands respect and preserve the
structure of the file as a do list:

`C-c C-x d'  (`C-c d') (`dkdo-TaskDone')
     Move the current task to section `DONE'.                      
     *Note Move to DONE::.

`C-c C-x l'  (`C-c l') (`dkdo-TaskToLater')
     Move the current task to section `LATER'.                     
     *Note Move to LATER::.

`C-c C-x n'  (`C-c n') (`dkdo-TaskToNow')
     Move the current task to section `NOW'.                       
     *Note Move to NOW::.

`C-c C-x r'  (`C-c r') (`dkdo-BufferRefresh')
     Refresh the buffer.                                            
     *Note Refresh Buffer::.

`C-c C-x s'  (`C-c s') (`dkdo-TaskStart')
     Start a new task or subtask after the current task or subtask.
     *Note Start New Task::.

   Each move command applies to the "current" task or subtask, that is
the task or subtask in whose headline or content point currently lies.

   When point is in a subtask's headline or content, the subtask is
moved, becomes detached from its parent task and is "promoted" to a
task in its own right (by adjusting its headline prefix).

   On the other hand, when point is in a task's headline or content,
but NOT on a subtask, a move applies to the task as a whole including
any subtasks. A task containing subtasks can be moved from section
`DONE' to section `LATER' and back, but it is not possible to move a
task containing subtasks to `DONE', as each subtask must be completed
and therefore moved to `DONE' individually.


File: dkdo.info,  Node: Start New File,  Next: Start New Task,  Prev: Operations Overview,  Up: Operations

3.2 Start New File
==================

When dkdo-mode starts on an empty buffer, it prompts the user with
`Empty dolist. Insert sections?' and on confirmation calls function
`dkdo-BufferPrepare' to insert sections `NOW', `LATER', and `DONE'.

   If the user rejects insertion of sections, dkdo-mode prompts the
user with `Empty dolist. Load sample do file?' and on confirmation
calls function `dkdo-BufferLoadSample' to load a sample do list file
from the package directory into the current buffer.


File: dkdo.info,  Node: Start New Task,  Next: Move to DONE,  Prev: Start New File,  Up: Operations

3.3 Start New Task
==================

`C-c C-x s'  (`C-c s') (`dkdo-TaskStart')

   Inserts the headline prefix for a new task or subtask immediately
after the current task/subtask, and positions point for editing the
remainder of the headline and its content (if any).


File: dkdo.info,  Node: Move to DONE,  Next: Move to LATER,  Prev: Start New Task,  Up: Operations

3.4 Move to `DONE'
==================

`C-c C-x d'  (`C-c d') (`dkdo-TaskDone')

   Moves the current task/subtask to section `DONE', indicating that it
has been completed. It is prefixed in section `DONE' with the current
time as a timestamp representing the completion date, and is inserted
in the appropriate chronological position by completion date.  Should a
task need to be re-visited after completion, it can be moved to section
`NOW' or section `LATER' (causes the completion timestamp to be
removed).

   To change a completion timestamp in section `DONE', move the task
from `DONE' to `DONE'. This operation prompts for a replacement
completion timestamp. *Note Entering Times::.


File: dkdo.info,  Node: Move to LATER,  Next: Move to NOW,  Prev: Move to DONE,  Up: Operations

3.5 Move to `LATER'
===================

`C-c C-x l'  (`C-c l') (`dkdo-TaskToLater')

   Moves the current task/subtask to section `LATER' and prompts for a
due date/time which is prefixed to the task headline. The task is
inserted at the appropriate chronological position by due date. *Note
Entering Times::.

   This is the standard way to handle a task which needs to be placed
on hold pending action by others, or which needs to be deferred for
later consideration for some other reason.

   Also the standard way to enter a task with a due date is to insert
it into section `NOW' with `C-c C-x s'  (`C-c s') (`dkdo-TaskStart'),
edit it as required but omit a due date, and then move it to section
`LATER', which will prompt for the due date.

   To change a due date in section `LATER', use `C-c C-x l'  (`C-c l')
(`dkdo-TaskToLater') to move the task from section `LATER' to section
`LATER'. You can enter the new due date at the prompt.


File: dkdo.info,  Node: Move to NOW,  Next: Recurring Tasks,  Prev: Move to LATER,  Up: Operations

3.6 Move to `NOW'
=================

`C-c C-x n'  (`C-c n') (`dkdo-TaskToNow')

   Moves the current task/subtask to section `NOW'. The chronological
insert position is found by comparing its due date with the due dates,
if present, of existing tasks in section `NOW', starting from the top.

   A task is moved from section `LATER' to section `NOW' when it is to
be worked on, either because its due date is imminent, or for some
other reason. The task due date prefix remains in place after the move.

   This move can be applied to all actionable tasks/subtasks in section
`LATER' in a single operation with `C-c C-x r'  (`C-c r')
(`dkdo-BufferRefresh'), and can be automated by enabling the Refresh
Timer (*note Refresh Timer::), which calls `dkdo-BufferRefresh'
periodically.  *Note Actionable::.

   A previously completed task is moved from section `DONE' to section
`NOW' in the event that it needs to be revisited and worked on some
more. In this case the task's completion date prefix is removed.


File: dkdo.info,  Node: Recurring Tasks,  Next: Entering Times,  Prev: Move to NOW,  Up: Operations

3.7 Recurring Tasks
===================

A "recurring task" has a repetition interval after the due date. *Note
Time Interval::.

   Before a task with a repetition interval is moved from section
`LATER' to a different section, it is cloned. The repetition interval
is removed from one copy, and that copy is moved to the target section.
The due date of the second copy is shifted forward in time by the
repetition interval and the copy is moved to the appropriate new
chronological position in section `LATER'.

   For example in the following dolist the task in section `LATER' due
on 2013-09-21 is recurring monthly.

* NOW:

* LATER:
** 2013-09-21 1m Reconcile Bank Account [/]:
- [ ] Download and print statement.
- [ ] Reconcile in accounts.
** 2013-09-24 Other task.

* DONE:

When the recurring task is becomes actionable the do list is
adjusted as follows:

* NOW:
** 2013-09-21 Reconcile Bank Account [/]:
- [ ] Download and print statement.
- [ ] Reconcile in accounts.

* LATER:
** 2013-09-24 Other task.
** 2013-10-21 1m Reconcile Bank Account [/]:
- [ ] Download and print statement.
- [ ] Reconcile in accounts.

* DONE:


File: dkdo.info,  Node: Entering Times,  Next: Refresh Buffer,  Prev: Recurring Tasks,  Up: Operations

3.8 Entering Times
==================

Some move operations prompt for a date/time value, which is inserted as
a prefix to the task headline. On moving to `LATER', the input value is
the due timestamp, usually in the future. On moving from `DONE' to
`DONE' it is the completion timestamp, usually in the past.

   Time input is as for function `org-read-date' but note the following:

  1. Only ISO dates (YYYY-MM-DD) are supported.

  2. When entering a relative time (*note Time Interval::), the leading
     sign can be omitted provided the unit is present. In that case the
     shift is presumed to be forward.

  3. If a relative or partial time entered, it is evaluated with
     respect to the current time when moving a task from `NOW' to
     `LATER' or from `DONE' to `LATER'. However when moving from
     `LATER' to `LATER' or from `DONE' to `DONE' it is evaluated with
     respect to the current task timestamp.


File: dkdo.info,  Node: Refresh Buffer,  Next: Refresh Timer,  Prev: Entering Times,  Up: Operations

3.9 Refresh Buffer
==================

`C-c C-x r'  (`C-c r') (`dkdo-BufferRefresh')

   The primary function of this operation, and the only function when
it is invoked by the Refresh Timer (*note Refresh Timer::), is to scan
section `LATER' and move any tasks that have become actionable to
section `NOW'. *Note Actionable::.

   When invoked manually, it also sorts tasks in sections `LATER' and
`DONE', and folds tasks in all sections so only the task level
headlines are visible, and task content is invisible.

   If `dkdo-BufferRefresh' finds a version control conflict marker in
the file it emits an error message and makes no changes to the file.
This gives the user a chance to resolve conflicts first. The regular
expression for a conflict marker can be customised via variable
`dkmisc-ConflictMarkerRe' in customisation group `dkmisc'.


File: dkdo.info,  Node: Refresh Timer,  Prev: Refresh Buffer,  Up: Operations

3.10 Refresh Timer
==================

The Refresh Timer is started on entry to dkdo-mode if variable
`dkdo-RefreshSeconds' has a value greater than zero. While running, the
timer calls function `dkdo-BufferRefresh' periodically at the specified
interval to move any actionable tasks from section `LATER' to section
`NOW'. *Note Actionable::.

   A change to `dkdo-RefreshSeconds' has no effect on an existing
dkdo-mode buffer until `dkdo-RefreshTimerStartIf' is run while the
buffer is current. It stops any existing timer and starts a new one if
appropriate.

   You can stop the timer at any time with `dkdo-RefreshTimerStop'.


File: dkdo.info,  Node: Index,  Prev: Operations,  Up: Top

4 Index
*******

 [index ]
* Menu:

* actionable:                            Sections and Tasks.   (line 25)
* buffer refresh:                        Refresh Buffer.       (line  8)
* C-c C-x d:                             Move to DONE.         (line  6)
* C-c C-x l:                             Move to LATER.        (line  6)
* C-c C-x n:                             Move to NOW.          (line  6)
* C-c C-x r:                             Refresh Buffer.       (line  6)
* C-c C-x s:                             Start New Task.       (line  6)
* C-c d:                                 Move to DONE.         (line  6)
* C-c l:                                 Move to LATER.        (line  6)
* C-c n:                                 Move to NOW.          (line  6)
* C-c r:                                 Refresh Buffer.       (line  6)
* C-c s:                                 Start New Task.       (line  6)
* checkbox:                              Checkboxes.           (line  6)
* completion timestamp:                  Task/Subtask Details. (line 24)
* conflict marker:                       Refresh Buffer.       (line 17)
* content, task <1>:                     Task/Subtask Details. (line 51)
* content, task:                         File Structure.       (line 13)
* date, due:                             Task/Subtask Details. (line 31)
* date, entry of:                        Entering Times.       (line  6)
* dkdo-BufferRefresh:                    Refresh Buffer.       (line  6)
* dkdo-TaskDone:                         Move to DONE.         (line  6)
* dkdo-TaskStart:                        Start New Task.       (line  6)
* dkdo-TaskToLater:                      Move to LATER.        (line  6)
* dkdo-TaskToNow:                        Move to NOW.          (line  6)
* due date:                              Task/Subtask Details. (line 31)
* due date, entry of:                    Move to LATER.        (line 17)
* due timestamp:                         Task/Subtask Details. (line 31)
* editing:                               Operations Overview.  (line  6)
* example do list:                       Start New File.       (line 10)
* file, new:                             Start New File.       (line  6)
* key, task:                             Task/Subtask Details. (line 43)
* list:                                  Checkboxes.           (line  6)
* move command, application:             Operations Overview.  (line 37)
* new file:                              Start New File.       (line  6)
* new task:                              Start New Task.       (line  8)
* prefix:                                Task/Subtask Details. (line 20)
* promote, subtask to task:              Operations Overview.  (line 40)
* refresh timer:                         Refresh Timer.        (line  6)
* refresh, buffer:                       Refresh Buffer.       (line  8)
* relative time, evaluation of:          Entering Times.       (line 19)
* repeater:                              Task/Subtask Details. (line 38)
* repetition interval:                   Task/Subtask Details. (line 38)
* sample do list:                        Start New File.       (line 10)
* section:                               File Structure.       (line  6)
* subtask:                               File Structure.       (line 20)
* subtask, intent:                       Subtasks.             (line  6)
* task:                                  File Structure.       (line 13)
* task completion timestamp:             Task/Subtask Details. (line 24)
* task content:                          Task/Subtask Details. (line 51)
* task key:                              Task/Subtask Details. (line 43)
* task, definition:                      Task/Subtask Details. (line  6)
* task, details:                         Task/Subtask Details. (line  6)
* task, new:                             Start New Task.       (line  8)
* time interval:                         Time Interval.        (line  8)
* time, entry of:                        Entering Times.       (line  6)
* timer, refresh:                        Refresh Timer.        (line  6)
* timestamp, completion:                 Task/Subtask Details. (line 24)
* timestamp, due:                        Task/Subtask Details. (line 31)
* version control:                       Refresh Buffer.       (line 17)



Tag Table:
Node: Top472
Node: Introduction624
Node: Overview802
Node: Getting Started1453
Node: Known Issues2242
Node: Changes2476
Node: Data2758
Node: File Structure2978
Node: Sections and Tasks4392
Ref: Actionable5498
Node: Subtasks6078
Node: Checkboxes7150
Node: Task/Subtask Details8106
Node: Time Interval10098
Node: Operations10682
Node: Operations Overview10983
Node: Start New File13065
Node: Start New Task13675
Node: Move to DONE14050
Node: Move to LATER14844
Node: Move to NOW15889
Node: Recurring Tasks16999
Node: Entering Times18239
Node: Refresh Buffer19273
Node: Refresh Timer20226
Node: Index20938

End Tag Table


Local Variables:
coding: utf-8
End:
